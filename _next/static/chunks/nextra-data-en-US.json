{"/about":{"title":"About?","data":{"":"Documentation created by MasNana using Nextra."}},"/ghmattimysql/Function":{"title":"Function","data":{"":"","callback#Callback":"exports.ghmattimysql:execute\nexports.ghmattimysql:saclar\nexports.ghmattimysql:transaction","promise#Promise":"exports.ghmattimysql:executeSync\nexports.ghmattimysql:scalarSync\nexports.ghmattimysql:transactionSync\n\nexecute response INSERT UPDATE DELETE\n{\nserverStatus = 2,\nchangedRows = 0,\ninsertId = 0,\nmessage = \"(Rows matched: 0  Changed: 0  Warnings: 0\",\nwarningCount = 0,\naffectedRows = 0,\nprotocol41 = \"true\",\nfieldCount = 0,\n}","console-command#Console Command":"mysql:debug"}},"/ghmattimysql/Function/execute":{"title":"execute","data":{"":"This is the universal function which will handle most of your requests.","promise#Promise":"local response = exports.ghmattimysql:executeSync('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\nidentifier\n})\n\nif response then\nfor i = 1, #response do\nlocal row = response[i]\nprint(row.firstname, row.lastname)\nend\nend","callback#Callback":"exports.ghmattimysql:execute('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\nidentifier\n}, function(response)\nif response then\nfor i = 1, #response do\nlocal row = response[i]\nprint(row.firstname, row.lastname)\nend\nend\nend)"}},"/ghmattimysql/Function/scalar":{"title":"scalar","data":{"":"You use this function when you want only a singular value returned. This means you can call it when when selecting exactly one row and one column.","promise#Promise":"local firstName = exports.ghmattimysql:scalarSync('SELECT `firstname` FROM `users` WHERE `identifier` = ? LIMIT 1', {\nidentifier\n})\n\nprint(firstName)","callback#Callback":"exports.ghmattimysql:scalar('SELECT `firstname` FROM `users` WHERE `identifier` = ? LIMIT 1', {\nidentifier\n}, function(firstName)\nprint(firstName)\nend)"}},"/ghmattimysql/Function/transaction":{"title":"transaction","data":{"":"Transactions are multiple executes chained together, so that if one fails, all others fail too.\nlocal queries = {\n{query = 'INSERT INTO `test` (id) VALUES (@id)', parameters = { id = 1 }},\n{query = 'INSERT INTO `test` (id, name) VALUES (@id, @name)', values = { id = 2, name = 'bob' }},\n}","promise#Promise":"local success = exports.ghmattimysql:transactionSync(queries)\nprint(success)","callback#Callback":"exports.ghmattimysql:transaction(queries, values, function(success)\nprint(success)\nend)"}},"/ghmattimysql/placeholders":{"title":"Placeholders","data":{"":"Placeholders allow for query parameters to be safely executed, preventing common SQL injection methods(opens in a new tab).Parameters can be passed an an array or map (referred to as named named parameters).\nlocal identifier = 'license:abc123'\nlocal group = 'admin'\n\nexports.ghmattimysql:scalar('SELECT `username` FROM `users` WHERE `identifier` = ? AND `group` = ?', { identifier, group })\n\n-- Named placeholders (deprecated)\nexports.ghmattimysql:scalar('SELECT `username` FROM `users` WHERE `identifier` = @identifier AND `group` = @group', {\ngroup = group\nidentifier = identifier\n})"}},"/":{"title":"Introduction","data":{"":"Welcome to Nextra! This is a basic docs template. You can use it as a starting point for your own project :)","what-is-nextra#What is Nextra?":"A simple, powerful and flexible site generation framework with everything you love from Next.js.","documentation#Documentation":"The documentation is available at https://nextra.site."}},"/redem_roleplay/Client":{"title":"Client","data":{"":"","isped#isPed":"exports.redem_roleplay:isPed(param)\n\nparam: string\ncid, job, jobgrade, group","setstress#setStress":"exports['vc-hud']:setStress(amount)\n\namount: number\n10 add 10 stress points\n-10 remove 10 stress points\nmax 100"}},"/redem_roleplay/Server":{"title":"Server","data":{"":"getPlayerFromId or playerModule\nlocal user = exports.redem_roleplay:getPlayerFromId(source)\nlocal user = exports.redem_roleplay:playerModule(source)","function#Function":"user.setFirstname(name)\nuser.setLastname(name)\nuser.setJob(job)\nuser.setJobgrade(grade)\nuser.setOrigin(origin)\nuser.kick(reason)","charinfo#Charinfo":"user.getName()\nuser.getFirstname()\nuser.getLastname()\nuser.getJob()\nuser.getJobgrade()\nuser.getOrigin()\nuser.getDOB()\nuser.getGender()\nuser.getPermissions()\nuser.getIdentifier(i)\nuser.getGroup()\nuser.setSessionVar(key, value)\nuser.getSessionVar('charid')","money#Money":"user.setMoney(amount)\nuser.getMoney()\nuser.addMoney(amount)\nuser.removeMoney(amount)","bank#Bank":"user.setBank(amount)\nuser.getBank()\nuser.addBank(amount)\nuser.removeBank(amount)","vbit#Vbit":"user.getBit()\nuser.removeBit(vbit, m, reason)","gold#Gold":"disabled\nuser.setGold(amount)\nuser.getGold()\nuser.addGold(amount)\nuser.removeGold(amount)"}},"/snippets":{"title":"Snippets","data":{"":"","mythic_notify#mythic_notify":"exports['mythic_notify']:SendAlert(type, text, length)\n\nTriggerClientEvent('mythic_notify:client:SendAlert', source, { type = 'inform', text = 'Message', length = 5000 })\n\ntype: string\ninform blue\nsucces green\nerror red\n\n\ntext: string\nthe message\n\n\nlength?: number\nhow long is the Notify is showing (default: 5000)"}},"/vc-inventory/Event/Client":{"title":"Client","data":{"":""}},"/vc-inventory/Event/Server":{"title":"Server","data":{"":""}},"/vc-inventory/Function/Client":{"title":"Client","data":{"":"","additem#AddItem":"Adds an item to player.\nexports['vc-inventory']:AddItem(item, count, info, slot)\n\nitem: string\nThe name of the item to add to the target.\n\n\ncount: number\nThe number of items to add.\n\n\ninfo?: table or string\nA table of unique data to attach to the item object. A string will create a table with the \"type\" field.\n\n\nslot?: number\nA specific slot to add the item to. If the slot is invalid, the first available slot will be used instead.","removeitem#RemoveItem":"Removes the specified item from player.\nexports['vc-inventory']:RemoveItem(item, count, info, slot)\n\nitem: string\nThe name of the item to remove from the target.\n\n\ncount: number\nThe number of items to remove.\n\n\nmetadata?: table or string\nOnly remove items with matching metadata properties.\n\n\nslot?: number\nA specific slot to remove the item from. If the slot is invalid, the first available slot will be used instead.","example#Example":"-- Add 2 document to the source player with provided information.\nexports['vc-inventory']:AddItem('document', 2, {id = 459})\n\n-- Removes 2 document to the source player with provided information.\nexports['vc-inventory']:RemoveItem('document', 2, {id = 459})"}},"/vc-inventory/Function/Server":{"title":"Server","data":{"":"","additem#AddItem":"Adds an item to player.\nexports['vc-inventory']:AddItem(source, item, count, info, slot)\n\nsource: number\nThe source of the player\n\n\nitem: string\nThe name of the item to add to the target.\n\n\ncount: number\nThe number of items to add.\n\n\ninfo?: table or string\nA table of unique data to attach to the item object. A string will create a table with the \"type\" field.\n\n\nslot?: number\nA specific slot to add the item to. If the slot is invalid, the first available slot will be used instead.","removeitem#RemoveItem":"Removes the specified item from player.\nexports['vc-inventory']:RemoveItem(source, item, count, info, slot)\n\nsource: number\nThe source of the player\n\n\nitem: string\nThe name of the item to remove from the target.\n\n\ncount: number\nThe number of items to remove.\n\n\nmetadata?: table or string\nOnly remove items with matching metadata properties.\n\n\nslot?: number\nA specific slot to remove the item from. If the slot is invalid, the first available slot will be used instead.","example#Example":"-- Add 2 document to the source player with provided information.\nlocal success = exports['vc-inventory']:AddItem(source, 'document', 2, {id = 459})\n\n-- Removes 2 document to the source player with provided information.\nlocal success = exports['vc-inventory']:RemoveItem(source, 'document', 2, {id = 459})"}}}